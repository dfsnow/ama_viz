library(tidyverse)
library(ggplot2)
library(reticulate)
library(reldist)
source("snow/split_violin.R")

years <- c(1940, 1960, 1980, 2000, 2010, 2016)

# Import Jamie's Python population dictionary
use_condaenv(condaenv = "jupyterenv",
             conda = "/anaconda3/bin/conda",
             required = TRUE)
repl_python()
import pandas as pd
df = pd.DataFrame.from_dict({
  "1940": (61889793,  68456003),
  "1960": (73739120, 105573000),
  "1980": (69436960, 157425440),
  "2000": (66251159, 215170747), 
  "2010": (69836502, 234128773),
  "2016": (69160217, 249397945)})
df.columns = df.columns.map(str)
print(df)
exit

# Reformatting the dictionary for use in R
df <- as.data.frame(t(py$df)) %>% rownames_to_column("YEAR")
colnames(df)[2:3] <- c("0", "1")
df <- df %>% gather("0", "1", 2:3)
colnames(df)[2:3] <- c("UR", "POP")
col.nums <- c("YEAR", "POP")
df <- as.data.frame(map(df, as.numeric))

# Reading the Jamie's ACS and census data
phys_acs <- read_csv('snow/data/phys_acs.csv')
phys_cen <- read_csv('snow/data/phys_census.csv')
phys_acs$METRO <- as.numeric(phys_acs$METRO)

# Filtering both data sets
phys_acs <- phys_acs %>%
  filter(EDUCD >= 114 & EMPSTAT == 1 & AGE >= 25)
phys_cen <- phys_cen %>%
  filter((EDUCD >= 114 | YEAR < 2000) & EMPSTAT == 1 & AGE >= 25)

# Merge ACS and census datasets 
phys_all <- bind_rows(
  mutate_all(phys_acs, as.character),
  mutate_all(phys_cen, as.character))
phys_all$UR <- ifelse(phys_all$METRO %in% c(2, 3, 4), 1, 0)
col.nums <- c("YEAR", "AGE", "UR", "PERWT")
phys_all[col.nums] <- map(phys_all[col.nums], as.numeric)

# Calculate total population for year by age and urban status
phys_tot <- phys_all %>%
  group_by(YEAR, AGE, UR) %>%
  summarize(doc_pop = sum(PERWT))

# Get weighted mean age for split violin
phys_tot <- phys_tot %>% group_by(YEAR, UR) %>%
  filter(YEAR %in% years) %>%
  mutate(mean_age = weighted.mean(AGE, doc_pop))

# Get pop per 100k for split violin
phys_tot <- left_join(phys_tot, df, by = c("YEAR", "UR"))
phys_tot <- phys_tot %>% mutate(per100k = doc_pop * 1e5 / POP)

# Create split violin plot
if(FALSE) {
plot_violin <- ggplot(
  phys_tot,
  aes(1, AGE, fill = factor(UR), group = UR, weight = doc_pop)
  ) +
  geom_split_violin(
    trim = TRUE,
    adjust = 0.5,
    scale = "width",
    alpha = 0.5
  ) +
  facet_wrap(~ YEAR, nrow = 1, strip.position = "bottom") +
  geom_hline(data = filter(phys_tot, UR == 1),
             aes(yintercept = mean_age,
                 group = YEAR),
             color = "red3",
             show.legend = FALSE,
             size = 1.3) +
  geom_hline(data = filter(phys_tot, UR == 0),
             aes(yintercept = mean_age,
                 group = YEAR),
             color = "slateblue3",
             show.legend = FALSE,
             size = 1.3) +
  scale_y_continuous(breaks = seq(20, 90, by = 10)) +
  scale_x_reverse() +
  scale_fill_manual(
    values = c("1" = "red3", "0" = "slateblue3"),
    labels = c("Urban", "Rural")) +
  labs(y = "Physician Age") +
  theme_bw() +
  theme(
    panel.background = element_blank(),
    panel.border = element_blank(),
    legend.text = element_text(size = 12),
    legend.title = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 12),
    axis.title.y = element_text(size = 14),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    strip.placement = "outside",
    strip.text.x = element_text(size = 14),
    strip.switch.pad.wrap = unit(-0.5, "cm"),
    strip.background = element_blank()
  )
}
  
# Create box plot
plot_box <- phys_tot %>% group_by(YEAR, UR) %>% 
  summarise(
    ymin = wtd.quantile(AGE, 0.10, weight = doc_pop),
    lower = wtd.quantile(AGE, 0.25, weight = doc_pop),
    middle = wtd.quantile(AGE, 0.5, weight = doc_pop),
    upper = wtd.quantile(AGE, 0.75, weight = doc_pop),
    ymax = wtd.quantile(AGE, 0.90, weight = doc_pop)
  ) 
ggplot() +
  geom_boxplot(
    aes(
      x = UR,
      ymin = ymin,
      lower = lower,
      middle = middle,
      upper = upper,
      ymax = ymax,
      group = UR,
      fill = as.factor(UR)),
    varwidth = TRUE,
    alpha = 0.5,
    stat = "identity",
    show.legend = TRUE
  ) +
  facet_wrap(~ YEAR, nrow = 1, strip.position = "bottom") +
  scale_y_continuous(breaks = seq(20, 90, by = 10)) +
  scale_x_reverse() + 
  scale_fill_manual(
    values = c("0" = "grey55", "1" = "grey95"),
    labels = c("Rural", "Urban")) +
  labs(y = "Physician Age") + 
  theme_bw() +
  theme(
    panel.background = element_blank(),
    panel.border = element_blank(),
    panel.spacing.x = unit(14, "pt"),
    legend.text = element_text(size = 12),
    legend.title = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 12),
    axis.title.y = element_text(size = 14),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    strip.placement = "outside",
    strip.text.x = element_text(size = 14),
    strip.switch.pad.wrap = unit(-0.5, "cm"),
    strip.background = element_blank()
  )

# Create column/histogram plot
plot_hist <- ggplot() +
  geom_col(data = filter(phys_tot, UR == 1),
           aes(x = AGE, y = per100k, fill = "Urban"),
           alpha = 0.5) +
  geom_col(data = filter(phys_tot, UR == 0),
           aes(x = AGE, y = per100k, fill = "Rural"),
           alpha = 0.5) +
  facet_wrap(~ YEAR, ncol = 1, strip.position = "left") + 
  geom_vline(data = filter(phys_tot, UR == 1),
             aes(xintercept = mean_age,
                 group = YEAR,
                 color = "Urban",
                 linetype = "Mean Age"),
             show.legend = FALSE,
             size = 1.3) +
  geom_vline(data = filter(phys_tot, UR == 0),
             aes(xintercept = mean_age,
                 group = YEAR,
                 color = "Rural",
                 linetype = "Mean Age"),
             show.legend = FALSE,
             size = 1.3) +
  geom_line(data = data.frame(x = 25:79, y = 5),
            aes(x = x, y = y, linetype = "5 Doctors\nPer 100K"),
            color = "grey13") +
  scale_x_continuous(name = "Physician Age",
                     breaks = seq(20, 80, by = 10),
                     limits = c(23, 79),
                     expand = c(0, 0)) +
  scale_fill_manual(values = c("Rural" = "red3", "Urban" = "slateblue3")) + 
  scale_color_manual(values = c("Rural" = "red3", "Urban" = "slateblue3")) + 
  scale_linetype_manual(values = c("5 Doctors\nPer 100K" = "dotted", "Mean Age" = "solid")) +
  theme_bw() +
  theme(panel.border = element_blank(),
        legend.text = element_text(size = 12),
        legend.title = element_blank(),
        legend.spacing.y = unit(-0.3, "cm"),
        legend.background = element_rect(fill = "transparent"),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        panel.grid.major.y = element_blank(),
        panel.grid.minor.y = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_blank(),
        axis.text.x = element_text(
          size = 12,
          hjust = c(0.5, 0.5, 0.5, 0.5, 0.5, 1)),
        strip.placement = "outside",
        strip.switch.pad.wrap = unit(-.55, "cm"),
        strip.text.y = element_text(
          angle = 180,
          size = 16,
          vjust = 0.06),
        strip.background = element_blank())

# Save all plots
# ggsave("snow/plot_violin.png", plot_violin)
ggsave("snow/plot_box.pdf", plot_box, width = 7, height = 4, dpi = 200)
ggsave("snow/plot_hist.png", plot_hist, width = 7, height = 4, dpi = 200)
